[{"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/index.js":"1","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/App.js":"2","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/reportWebVitals.js":"3","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/components/Calculator.js":"4","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/index.js":"5","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/reportWebVitals.js":"6","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/App.js":"7","/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/components/Calculator.js":"8"},{"size":329,"mtime":1668462500259,"results":"9","hashOfConfig":"10"},{"size":196,"mtime":1668462921908,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1668454289496,"results":"12","hashOfConfig":"10"},{"size":22415,"mtime":1670368810763,"results":"13","hashOfConfig":"10"},{"size":271,"mtime":1670507331225,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1668454289496,"results":"16","hashOfConfig":"15"},{"size":408,"mtime":1670507433735,"results":"17","hashOfConfig":"15"},{"size":7955,"mtime":1670506784620,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xksluq",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e0zct1",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/index.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/App.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/reportWebVitals.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/components/Calculator.js",["44","45","46","47","48"],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/index.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/reportWebVitals.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/App.js",[],[],"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0028-react-calculator/src/components/Calculator.js",["49","50","51","52"],[],"import React from 'react';\nimport {setState, getState} from \"react\";\n\nclass Calculator extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            display: \"0\",\n            wasEqualPressedBefore: false\n\n        }; \n\n        this.handleNumberPress = this.handleNumberPress.bind(this);\n        this.handleOperatorPress = this.handleOperatorPress.bind(this);\n        this.handleEqualPress = this.handleEqualPress.bind(this);\n        this.handleDecimalPress = this.handleDecimalPress.bind(this);\n        this.handleClearPress = this.handleClearPress.bind(this);\n    }\n\n\n\n    handleClearPress(e){\n        // console.log(\"clear was pressed!\");\n        this.setState((state)=>{\n            return {\n                display: \"0\",\n                wasEqualPressedBefore: false\n            }\n        })\n    }\n\n\n\n\n    handleNumberPress(e){\n\n        let number = e.target.textContent;\n        // When inputting numbers, my calculator should not allow a number to begin with multiple zeros. \n        // Deal with multiple zeroes \"0\" or \"000\" scenaries\n        // Don't allow the user to insert more than one zero \n        if ((this.state.display === \"0\") && (e.target.textContent === \"0\")){\n            // Do nothing just exit the function \n            return undefined;\n        }\n\n        // If equal was pressed and a calcualtion was done just before the number press \n        // Go ahead and clear evertything. \n\n\n        if (this.state.display === \"0\"){\n\n            this.setState((state)=>{\n                return {\n                    display: number\n                }\n            });\n        } else if ( \"/*-+\".indexOf(this.state.display[this.state.display.length-1]) !== -1  ) {\n            this.setState ((state)=>{ \n                return {\n                    display: this.state.wasEqualPressedBefore ? number : this.state.display + \" \" + number,\n                    wasEqualPressedBefore: false \n                } \n            }  );\n        } else {\n\n            this.setState ((state)=>{ \n                return {\n                    display: this.state.wasEqualPressedBefore ? number : this.state.display + number,\n                    wasEqualPressedBefore: false \n                } \n            }  );\n        }\n    }\n\n\n\n    handleOperatorPress(e){\n        let operator = e.target.textContent;\n\n        // Handle the special case when the user pressed double minuses\n\n        // When I have `1--2=` I want it to become  ` 1 - -2 = ` \n        // When I have `1*-2=` I want it to become  ` 1 * -2 = ` \n        // When I have `1 /*+-2` I want it to becom ` 1 + -2 = `\n        // When I have `1 /+-*2` I want it to becom ` 1 * 2 = ` \n        // console.log(\"this.state.display=\", this.state.display);\n\n        let tempDisplayArray = this.state.display.trim().split(\" \");\n        let firstOperatorBeforeNow = tempDisplayArray[tempDisplayArray.length-1];\n        let secondOperatorBeforeNow  = tempDisplayArray[tempDisplayArray.length-2];\n\n\n        // Test for the `1--2=` case, If I have 2 minuses, then it is a valid case but 3 minuses is not valid case\n\n        //    console.log(\"this.state.display=\", this.state.display);\n        //    console.log(\"tempDisplayArray=\", tempDisplayArray);\n        //    console.log(\"firstOperatorBeforeNow=\", firstOperatorBeforeNow);\n        //    console.log(\"secondOperatorBeforeNow=\", secondOperatorBeforeNow);\n        //    console.log(\"operator=\", operator);\n\n        // 1 + 1 situation \n        if (\"/*-+\".indexOf(firstOperatorBeforeNow) === -1){\n            this.setState((state)=>{\n                return {\n                    display: this.state.display + \" \" + operator + \" \"\n                }\n            });\n\n        } else if ((operator === \"-\") && (firstOperatorBeforeNow === \"-\") && (\"/*-+\".indexOf(secondOperatorBeforeNow) === -1) ) {\n            // 1 - - 1 situation\n\n            this.setState((state)=>{\n                return {\n                    display: this.state.display + \" \" + operator + \" \"\n                }\n            });\n        } else if ( (operator === \"-\") && ( \"/*+\".indexOf(firstOperatorBeforeNow) !== -1 )  ){\n            // 1 + - 1 situation\n            this.setState((state)=>{\n                return {\n                    display: this.state.display + \" \" + operator + \" \"\n                }\n            });\n\n        } else if ( (\"/*-+\".indexOf(firstOperatorBeforeNow) !== -1) && (\"/*-+\".indexOf(secondOperatorBeforeNow) !== -1) ){\n            // 1 * - + 1 situation \n            tempDisplayArray.splice(tempDisplayArray.length-2, 2);\n            tempDisplayArray[tempDisplayArray.length - 1] = operator;\n            let newDisplay = tempDisplayArray.join(\" \");\n            this.setState((state)=>{\n                return {\n                    display: newDisplay\n                }\n            });\n\n\n        } else {\n            // 1 / * + 1 situation\n            tempDisplayArray[tempDisplayArray.length - 1] = operator;\n            let newDisplay = tempDisplayArray.join(\" \");\n            this.setState((state)=>{\n                return {\n                    display: newDisplay\n                }\n            });\n\n\n        }\n\n\n\n        if (this.state.wasEqualPressedBefore) {\n            this.setState((state)=>{\n                return {\n                    wasEqualPressedBefore: false\n                }\n            });\n        }\n\n    }\n\n\n\n\n    handleEqualPress(e){\n        let result = eval(this.state.display);\n\n        //    console.log(\"Equal was pressed for:\");\n        //    console.log(\"display=\", this.state.display);\n        //    console.log(\"result=\", `${result}`);\n        //    console.log(\"----------------------\");\n        this.setState((state)=>{\n            return {\n                display: `${result}`,\n                wasEqualPressedBefore: true\n            }\n        });\n    }\n\n\n\n    handleDecimalPress(e){\n        let display = this.state.display;\n\n        //When the decimal element is clicked, a . should append to the currently displayed value; two . in one number should not be accepted. \n        let tempDisplayArray = this.state.display.split(\" \");\n        let lastNumber = tempDisplayArray[tempDisplayArray.length-1];\n\n\n\n        if (!lastNumber.includes(\".\")){\n            this.setState((state)=>{\n                return {\n                    display: this.state.display + \".\",\n                }\n            })\n        }  \n\n\n    }\n\n\n\n\n\n    render(){\n        return (\n            <div className=\"calculator\">\n                <div id=\"bothDisplays\">\n                    <div id=\"display\">{this.state.display}</div>\n                </div>\n\n                <div id=\"clear\" className=\"button\" onClick={this.handleClearPress} >AC</div>\n                <div id=\"divide\" className=\"button\" onClick={this.handleOperatorPress}>/</div>\n                <div id=\"multiply\" onClick={this.handleOperatorPress}>*</div>\n                <div id=\"subtract\" onClick={this.handleOperatorPress}>-</div>\n                <div id=\"add\" onClick={this.handleOperatorPress}>+</div>\n                <div id=\"equals\" onClick={this.handleEqualPress} >=</div>\n                <div id=\"seven\" onClick={this.handleNumberPress}>7</div>\n                <div id=\"eight\" onClick={this.handleNumberPress}>8</div>\n                <div id=\"nine\" onClick={this.handleNumberPress}>9</div>\n                <div id=\"four\" onClick={this.handleNumberPress}>4</div>\n                <div id=\"five\" onClick={this.handleNumberPress}>5</div>\n                <div id=\"six\" onClick={this.handleNumberPress}>6</div>\n                <div id=\"one\" onClick={this.handleNumberPress}>1</div>\n                <div id=\"two\" onClick={this.handleNumberPress}>2</div>\n                <div id=\"three\" onClick={this.handleNumberPress}>3</div>\n                <div id=\"zero\" onClick={this.handleNumberPress}>0</div>\n                <div id=\"decimal\" onClick={this.handleDecimalPress}>.</div>\n            </div>\n        );\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\nexport default Calculator;\n\n\n\n\n\n",{"ruleId":"53","severity":1,"message":"54","line":2,"column":9,"nodeType":"55","messageId":"56","endLine":2,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":2,"column":19,"nodeType":"55","messageId":"56","endLine":2,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":376,"column":42,"nodeType":"60","messageId":"61","endLine":376,"endColumn":44},{"ruleId":"62","severity":1,"message":"63","line":467,"column":9,"nodeType":"64","messageId":"65","endLine":484,"endColumn":10},{"ruleId":"66","severity":1,"message":"67","line":572,"column":29,"nodeType":"55","messageId":"68","endLine":572,"endColumn":34},{"ruleId":"53","severity":1,"message":"54","line":2,"column":9,"nodeType":"55","messageId":"56","endLine":2,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":2,"column":19,"nodeType":"55","messageId":"56","endLine":2,"endColumn":27},{"ruleId":"69","severity":1,"message":"70","line":166,"column":22,"nodeType":"71","messageId":"61","endLine":166,"endColumn":26},{"ruleId":"53","severity":1,"message":"72","line":183,"column":13,"nodeType":"55","messageId":"56","endLine":183,"endColumn":20},"no-unused-vars","'setState' is defined but never used.","Identifier","unusedVar","'getState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-self-assign","'total' is assigned to itself.","selfAssignment","no-eval","eval can be harmful.","CallExpression","'display' is assigned a value but never used."]