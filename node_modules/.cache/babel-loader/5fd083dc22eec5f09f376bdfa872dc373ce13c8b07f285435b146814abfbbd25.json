{"ast":null,"code":"var _jsxFileName = \"/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/components/Calculator.js\";\nimport React from 'react';\nimport { setState, getState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      upperScreenValue: \"0\",\n      lowerScreenValue: \"0\",\n      firstOperand: 0,\n      currentOperand: \"\",\n      secondOperand: 0,\n      lastOperator: null,\n      countOperators: 0,\n      negativeOperand: false,\n      arrayOfExpresion: [],\n      arrayIndex: 0\n    };\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n    this.handleClearPress = this.handleClearPress.bind(this);\n    this.calculateTotal = this.calculateTotal.bind(this);\n    this.handleCalculateTotal = this.handleCalculateTotal.bind(this);\n    this.handleUpperDisplay = this.handleUpperDisplay.bind(this);\n    this.handleLowerDisplay = this.handleLowerDisplay.bind(this);\n    this.displayTotal = this.displayTotal.bind(this);\n  }\n  handleClearPress() {\n    this.setState(state => {\n      return {\n        upperScreenValue: \"0\",\n        lowerScreenValue: \"0\",\n        firstOperand: 0,\n        currentOperand: \"\",\n        secondOperand: 0,\n        lastOperator: null,\n        countOperators: 0,\n        negativeOperand: false,\n        arrayOfExpresion: [],\n        arrayIndex: 0\n      };\n    });\n  }\n  handleUpperDisplay(e) {\n    // this.setState({input: event.target.value}); \n    // console.log(\"You clicked \",e.target.textContent);\n    // this.setState( {upperScreenValue: e.target.value  } );\n    //console.log(\"state=\", state);\n    // console.log(e.target.textContent);\n\n    // Handle the edge case where multiple dots .. are not alowed in a number\n    if (e.target.textContent === \".\" && this.state.upperScreenValue.indexOf(\".\") !== -1) {\n      this.setState(state => {\n        return state;\n      });\n    }\n    if (this.state.upperScreenValue === \"0\") {\n      // this.setState ((state)=>{ return state }  );\n      this.setState(state => {\n        return {\n          upperScreenValue: e.target.textContent\n        };\n      });\n    } else {\n      this.setState(state => {\n        return {\n          upperScreenValue: state.upperScreenValue.concat(e.target.textContent)\n        };\n      });\n    }\n\n    // console.log(\"state=\", state);\n  }\n\n  handleLowerDisplay(e) {\n    // this.setState({input: event.target.value}); \n    // console.log(\"You clicked \",e.target.textContent);\n    // this.setState( {upperScreenValue: e.target.value  } );\n    //console.log(\"state=\", state);\n    // console.log(e.target.textContent);\n\n    // Handle the edge case where multiple dots .. are not alowed in a number\n    if (e.target.textContent === \".\" && this.state.lowerScreenValue.indexOf(\".\") !== -1) {\n      // this.setState ((state)=>{ return state }  ); \n      console.log(\"e.target.textContent=\", e.target.textContent);\n      this.setState(state => {\n        return state;\n      });\n    }\n\n    // This code handles the initial state of zero when the calculator starts\n    //  This is the first operand in the series of calculations\n    if (this.state.lowerScreenValue === \"0\") {\n      // If I press minus once at the begining of the expresion\n      // then it is a negative number \n      //\n      this.setState(state => {\n        return {\n          lowerScreenValue: e.target.textContent,\n          currentOperand: e.target.textContent,\n          countOperators: 0\n        };\n      });\n      if (e.target.textContent === \"-\") {\n        this.setState(state => {\n          return {\n            negativeOperand: true\n          };\n        });\n      }\n    } else if (e.target.textContent !== \"=\" && e.target.textContent !== \"+\" && e.target.textContent !== \"-\" && e.target.textContent !== \"*\" && e.target.textContent !== \"/\") {\n      // At this point means that the user pressed only numbers or dot\n\n      // if the lower screen has an operator\n      // then overwrite it \n      // else just concatenate number to the lowerscreen \n      //\n\n      if (this.state.lowerScreenValue === \"=\" || this.state.lowerScreenValue === \"+\" || this.state.lowerScreenValue === \"-\" || this.state.lowerScreenValue === \"*\" || this.state.lowerScreenValue === \"/\") {\n        this.setState(state => {\n          return {\n            lowerScreenValue: e.target.textContent,\n            currentOperand: e.target.textContent,\n            countOperators: 0\n          };\n        });\n      } else {\n        // console.log(\"here you didn't press an operator\")\n\n        // Add the value in the lowerScreenValue to the arrayOfExpresion \n        let tempLowerScreen = this.state.lowerScreenValue.concat(e.target.textContent);\n\n        //let tempArray = state.arrayOfExpresion;\n        //tempArray[state.arrayIndex] = tempLowerScreen;\n\n        console.log(\"this.state.lowerScreenValue=\", this.state.lowerScreenValue);\n        console.log(\"tempLowerScreen=\", tempLowerScreen);\n        this.setState(state => {\n          return {\n            lowerScreenValue: tempLowerScreen,\n            currentOperand: tempLowerScreen,\n            countOperators: 0\n          };\n        });\n      }\n    } else {\n      // You pressed an operator such as \"= / * - +\"\n\n      // console.log(\"You pressed and operator like +-*/\");\n      // When I press an operator I will increase the array index \n      // let tempArrayIndex = state.arrayIndex + 1;\n\n      // When I press an operator the first thing I will add\n      // the currentOperand to the arrayOfExpresion\n\n      let tempOperator = e.target.textContent;\n      let tempArray = this.state.arrayOfExpresion;\n\n      // When I have `1--2=` I want it to become  ` 1 - -2 = ` \n      // When I have `1*-2=` I want it to become  ` 1 * -2 = ` \n      // When I have `1 /*+-2` I want it to becom ` 1 + -2 = `\n      // When I have `1 /+-*2` I want it to becom ` 1 * 2 = `\n\n      // How do I do that?\n      // If negativeOperand === true \n      // Then concat `-` to the operand\n      // And the negativeOperand = false\n\n      // If countOperators >= 1 and pressed `-` at the end\n      // Then negativeOperand = true\n\n      //               if (tempOperator === \"-\"){\n      //                   this.setState( (state)=>{ return {countMinus: state.countMinus + 1 } }  );\n      //                   console.log(\"this.state.countMinus:\", this.state.countMinus);\n      //               }\n      //\n      if (this.state.currentOperand !== \"=\" && this.state.currentOperand !== \"+\" && this.state.currentOperand !== \"-\" && this.state.currentOperand !== \"*\" && this.state.currentOperand !== \"/\") {\n        // Concatenate a \"-\" sign to the number if negativeOperand is true \n        if (this.state.countOperators === 0) {\n          if (this.state.negativeOperand === true) {\n            tempArray.push(\"-\" + this.state.currentOperand);\n            this.setState(state => {\n              return {\n                negativeOperand: false\n              };\n            });\n          } else if (this.state.currentOperand.length !== 0) {\n            tempArray.push(this.state.currentOperand);\n            // Reset the currentOperand to empty \n            this.setState(state => {\n              return {\n                currentOperand: \"\"\n              };\n            });\n            // console.log(\"this.state.currentOperand=\", this.state.currentOperand);\n            //this.setState((state)=>{return {countMinus: 0}});\n          }\n        }\n      } else if (this.state.countOperators !== 0 && this.state.negativeOperand === true) {\n        tempArray.push(\"-\" + this.state.currentOperand);\n        this.setState(state => {\n          return {\n            negativeOperand: false\n          };\n        });\n      }\n\n      // If it is not the first operator\n      // then if the tempOperator != minus\n      //      then overwrite the last operator\n      //      else If previous operator is \n      // else just add the operator to the arrayOfExpresion \n      //\n\n      // If countOperators >= 1 and pressed `-` at the end\n      // Then negativeOperand = true\n\n      if (this.state.countOperators !== 0) {\n        if (tempOperator === \"-\") {\n          this.setState(state => {\n            return {\n              negativeOperand: true\n            };\n          });\n        } else {\n          tempArray[tempArray.length - 1] = tempOperator;\n          this.setState(state => {\n            return {\n              negativeOperand: false\n            };\n          });\n        }\n      } else {\n        // Only push an operator if the countMinus is less or equal 1 \n        // which means that the minus was pressed once before \n        tempArray.push(tempOperator);\n      }\n\n      // Only count operators if the operators is not \"-\" spceial character...\n      let tempCountOperators = this.state.countOperators;\n      tempCountOperators++;\n      console.log(\"tempArray=\", tempArray);\n      //tempArray.push(state.currentOperand);\n\n      this.setState(state => {\n        return {\n          lowerScreenValue: e.target.textContent,\n          lastOperator: e.target.textContent,\n          arrayOfExpresion: tempArray,\n          countOperators: tempCountOperators\n        };\n      });\n    }\n\n    // console.log(\"state=\", state);\n  }\n\n  handleButtonPress(e) {\n    this.handleUpperDisplay(e);\n    this.handleLowerDisplay(e);\n    if (e.target.textContent === \"=\") {\n      this.handleCalculateTotal();\n    }\n  }\n  calculateTotal(firstOperand, operator, secondOperand) {\n    // TODO I need to check of the string has a `.` if so \n    // then I will parse it as a float not as an integer...\n    firstOperand = parseInt(firstOperand);\n    secondOperand = parseInt(secondOperand);\n    let total = 0;\n\n    // console.log(\"firstOperand=\", firstOperand);\n    //console.log(\"secondOperand=\", secondOperand);\n\n    switch (operator) {\n      case \"+\":\n        total = firstOperand + secondOperand;\n        break;\n      case \"-\":\n        total = firstOperand - secondOperand;\n        break;\n      case \"*\":\n        total = firstOperand * secondOperand;\n        break;\n      case \"/\":\n        total = firstOperand / secondOperand;\n        break;\n    }\n    this.setState(state => {\n      // console.log(\"total=\", total);\n      return {\n        firstOperand: total\n      };\n    });\n  }\n\n  //This function will parse an array similar to [ \"10\", \"-\", \"-2.42\", \"=\" ]\n  // And will output the calculation after looping through such an array...\n\n  handleCalculateTotal() {\n    let total = 0;\n    let operand = 0;\n    let operator = \"+\";\n    let tempArray = this.state.arrayOfExpresion;\n    for (let i = 0; i < tempArray.length; i++) {\n      // console.log (\"i=\", i);\n      // Test if the item is an operator\n      // Set the operator     \n      switch (tempArray[i]) {\n        case \"+\":\n          operator = \"+\";\n          break;\n        case \"-\":\n          operator = \"-\";\n          break;\n        case \"*\":\n          operator = \"*\";\n          break;\n        case \"/\":\n          operator = \"/\";\n          break;\n        case \"=\":\n          operator = \"=\";\n          break;\n        default:\n          // Test if the item is a number \n          // Make sure to check for float or integer \n          if (tempArray[i].indexOf(\".\") !== -1) {\n            // Then this is a float \n            operand = parseFloat(tempArray[i]);\n          } else {\n            // Else it is a integer \n            operand = parseInt(tempArray[i]);\n          }\n          break;\n      }\n\n      // Do the calculation\n      // Test if the i-th element is a number or not\n      if (Number.isNaN(Number(tempArray[i]))) {\n        // It is not a number \n        // console.log(\"Not a number\")\n      } else {\n        // It is a number \n        switch (operator) {\n          case \"+\":\n            total = total + operand;\n            break;\n          case \"-\":\n            total = total - operand;\n            break;\n          case \"*\":\n            total = total * operand;\n            break;\n          case \"/\":\n            total = total / operand;\n            break;\n          case \"=\":\n            total = total;\n            break;\n          default:\n            break;\n        }\n      }\n\n      // console.log(\"operand=\", operand);\n      // console.log(\"operator=\", operator);\n      // console.log(\"total=\", total);\n      // console.log(\" Number.isNaN( Number( tempArray[i] )  )  \", Number.isNaN( Number( tempArray[i] )  )    )\n    }\n\n    // Print the total\n    console.log(\"total=\", total);\n    this.setState(state => {\n      return {\n        upperScreenValue: state.upperScreenValue.concat(`${total}`),\n        lowerScreenValue: `${total}`\n      };\n    });\n  }\n  displayTotal() {\n    //console.log(\"displayTotal called\");\n    this.setState(state => {\n      return {\n        lowerScreenValue: this.state.firstOperand\n      };\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bothDisplays\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"upperDisplay\",\n          children: this.state.upperScreenValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"display\",\n          children: this.state.lowerScreenValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"clear\",\n        onClick: this.handleClearPress,\n        children: \"AC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"divide\",\n        onClick: this.handleButtonPress,\n        children: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"multiply\",\n        onClick: this.handleButtonPress,\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"subtract\",\n        onClick: this.handleButtonPress,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"add\",\n        onClick: this.handleButtonPress,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"equals\",\n        onClick: this.handleButtonPress,\n        children: \"=\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"seven\",\n        onClick: this.handleButtonPress,\n        children: \"7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"eight\",\n        onClick: this.handleButtonPress,\n        children: \"8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nine\",\n        onClick: this.handleButtonPress,\n        children: \"9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"four\",\n        onClick: this.handleButtonPress,\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"five\",\n        onClick: this.handleButtonPress,\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"six\",\n        onClick: this.handleButtonPress,\n        children: \"6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"one\",\n        onClick: this.handleButtonPress,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"two\",\n        onClick: this.handleButtonPress,\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"three\",\n        onClick: this.handleButtonPress,\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"zero\",\n        onClick: this.handleButtonPress,\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"decimal\",\n        onClick: this.handleButtonPress,\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Calculator;","map":{"version":3,"names":["React","setState","getState","Calculator","Component","constructor","props","state","upperScreenValue","lowerScreenValue","firstOperand","currentOperand","secondOperand","lastOperator","countOperators","negativeOperand","arrayOfExpresion","arrayIndex","handleButtonPress","bind","handleClearPress","calculateTotal","handleCalculateTotal","handleUpperDisplay","handleLowerDisplay","displayTotal","e","target","textContent","indexOf","concat","console","log","tempLowerScreen","tempOperator","tempArray","push","length","tempCountOperators","operator","parseInt","total","operand","i","parseFloat","Number","isNaN","render"],"sources":["/home/zen101/MY_STUFF/My Web Dev Projects/1_My_Current_Web_Dev_Project/0023-calculator-in-react/src/components/Calculator.js"],"sourcesContent":["import React from 'react';\nimport {setState, getState} from \"react\";\n\nclass Calculator extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            upperScreenValue: \"0\",\n            lowerScreenValue: \"0\",\n            firstOperand: 0,\n            currentOperand: \"\",\n            secondOperand: 0,\n            lastOperator: null,\n            countOperators: 0,\n            negativeOperand: false,\n            arrayOfExpresion: [],\n            arrayIndex: 0\n        }; \n\n        this.handleButtonPress= this.handleButtonPress.bind(this); \n        this.handleClearPress= this.handleClearPress.bind(this); \n        this.calculateTotal= this.calculateTotal.bind(this); \n        this.handleCalculateTotal= this.handleCalculateTotal.bind(this); \n        this.handleUpperDisplay= this.handleUpperDisplay.bind(this); \n        this.handleLowerDisplay= this.handleLowerDisplay.bind(this);\n        this.displayTotal= this.displayTotal.bind(this);\n\n\n    }\n\n\n\n    handleClearPress (){\n        this.setState((state)=>{\n            return {\n            upperScreenValue: \"0\",\n            lowerScreenValue: \"0\",\n            firstOperand: 0,\n            currentOperand: \"\",\n            secondOperand: 0,\n            lastOperator: null,\n            countOperators: 0,\n            negativeOperand: false,\n            arrayOfExpresion: [],\n            arrayIndex: 0\n            }\n        });\n    }\n\n\n\n    handleUpperDisplay(e){\n        // this.setState({input: event.target.value}); \n        // console.log(\"You clicked \",e.target.textContent);\n        // this.setState( {upperScreenValue: e.target.value  } );\n        //console.log(\"state=\", state);\n        // console.log(e.target.textContent);\n\n        // Handle the edge case where multiple dots .. are not alowed in a number\n        if( (e.target.textContent===\".\") && (this.state.upperScreenValue.indexOf(\".\") !== -1) ){\n            this.setState((state)=>{ return state  });\n        }\n\n\n        if (this.state.upperScreenValue === \"0\"){\n\n            // this.setState ((state)=>{ return state }  );\n            this.setState ((state)=>{ return { upperScreenValue: e.target.textContent  } }  );\n\n        } else {\n\n            this.setState ((state)=>{ \n                return {\n                    upperScreenValue: state.upperScreenValue.concat(e.target.textContent),\n                } \n            }  );\n\n        }\n\n\n        // console.log(\"state=\", state);\n    }\n\n\n\n    handleLowerDisplay(e){\n        // this.setState({input: event.target.value}); \n        // console.log(\"You clicked \",e.target.textContent);\n        // this.setState( {upperScreenValue: e.target.value  } );\n        //console.log(\"state=\", state);\n        // console.log(e.target.textContent);\n\n        // Handle the edge case where multiple dots .. are not alowed in a number\n        if( (e.target.textContent === \".\") && (this.state.lowerScreenValue.indexOf(\".\") !== -1) ){\n\n            // this.setState ((state)=>{ return state }  ); \n            console.log(\"e.target.textContent=\", e.target.textContent);\n            this.setState ((state)=>{ return state }  );\n\n        }\n\n        // This code handles the initial state of zero when the calculator starts\n        //  This is the first operand in the series of calculations\n        if (this.state.lowerScreenValue === \"0\") {\n\n            // If I press minus once at the begining of the expresion\n            // then it is a negative number \n            //\n            this.setState ((state)=>{\n                return {\n                    lowerScreenValue: e.target.textContent,\n                    currentOperand: e.target.textContent,\n                    countOperators: 0\n                }\n\n\n            }  );\n\n\n            if (e.target.textContent === \"-\"){\n                this.setState((state)=>{\n                    return { negativeOperand: true }\n                });\n            }\n\n\n        } else if( (e.target.textContent !== \"=\") &&\n            (e.target.textContent !== \"+\") &&\n            (e.target.textContent !== \"-\") &&\n            (e.target.textContent !== \"*\") &&\n            (e.target.textContent !== \"/\") ) {\n            // At this point means that the user pressed only numbers or dot\n\n            // if the lower screen has an operator\n            // then overwrite it \n            // else just concatenate number to the lowerscreen \n            //\n\n\n            if ( (this.state.lowerScreenValue === \"=\") ||\n                ( this.state.lowerScreenValue === \"+\") ||\n                ( this.state.lowerScreenValue === \"-\") ||\n                ( this.state.lowerScreenValue === \"*\") ||\n                ( this.state.lowerScreenValue === \"/\") ) {\n\n                this.setState((state)=>{\n                    return {\n                        lowerScreenValue: e.target.textContent,\n                        currentOperand: e.target.textContent,\n                        countOperators: 0\n                    }\n                });\n            } else {\n\n                // console.log(\"here you didn't press an operator\")\n\n\n\n                // Add the value in the lowerScreenValue to the arrayOfExpresion \n                let tempLowerScreen = this.state.lowerScreenValue.concat(e.target.textContent);\n\n\n                //let tempArray = state.arrayOfExpresion;\n                //tempArray[state.arrayIndex] = tempLowerScreen;\n\n                console.log(\"this.state.lowerScreenValue=\", this.state.lowerScreenValue);\n                console.log(\"tempLowerScreen=\", tempLowerScreen);\n                this.setState( (state)=>{\n\n                    return { \n                        lowerScreenValue: tempLowerScreen,\n                        currentOperand: tempLowerScreen,\n                        countOperators: 0\n                    }; \n                } );\n\n            }\n\n\n\n        } else {\n            // You pressed an operator such as \"= / * - +\"\n\n            // console.log(\"You pressed and operator like +-*/\");\n            // When I press an operator I will increase the array index \n            // let tempArrayIndex = state.arrayIndex + 1;\n\n            // When I press an operator the first thing I will add\n            // the currentOperand to the arrayOfExpresion\n\n            let tempOperator = e.target.textContent;\n            let tempArray = this.state.arrayOfExpresion;\n\n\n            // When I have `1--2=` I want it to become  ` 1 - -2 = ` \n            // When I have `1*-2=` I want it to become  ` 1 * -2 = ` \n            // When I have `1 /*+-2` I want it to becom ` 1 + -2 = `\n            // When I have `1 /+-*2` I want it to becom ` 1 * 2 = `\n\n            // How do I do that?\n            // If negativeOperand === true \n            // Then concat `-` to the operand\n            // And the negativeOperand = false\n\n\n            // If countOperators >= 1 and pressed `-` at the end\n            // Then negativeOperand = true\n\n\n\n\n\n            //               if (tempOperator === \"-\"){\n            //                   this.setState( (state)=>{ return {countMinus: state.countMinus + 1 } }  );\n            //                   console.log(\"this.state.countMinus:\", this.state.countMinus);\n            //               }\n            //\n            if ( (this.state.currentOperand !== \"=\") &&\n                ( this.state.currentOperand !== \"+\") &&\n                ( this.state.currentOperand !== \"-\") &&\n                ( this.state.currentOperand  !== \"*\") &&\n                ( this.state.currentOperand !== \"/\") ){\n\n                // Concatenate a \"-\" sign to the number if negativeOperand is true \n                if (this.state.countOperators === 0) {\n                    if (this.state.negativeOperand ===  true){\n                        tempArray.push( \"-\" + this.state.currentOperand);\n                        this.setState((state)=>{return {negativeOperand: false}});\n                    } else if (this.state.currentOperand.length !== 0)   {\n                        tempArray.push(  this.state.currentOperand);\n                        // Reset the currentOperand to empty \n                        this.setState( (state)=>{ return {currentOperand: \"\"  }  });\n                        // console.log(\"this.state.currentOperand=\", this.state.currentOperand);\n                        //this.setState((state)=>{return {countMinus: 0}});\n                    }\n                }\n\n            } else if ( ( this.state.countOperators !== 0) && (this.state.negativeOperand === true ) ) {\n                tempArray.push( \"-\" + this.state.currentOperand);\n                this.setState((state)=>{return {negativeOperand: false }});\n\n            }\n\n            // If it is not the first operator\n            // then if the tempOperator != minus\n            //      then overwrite the last operator\n            //      else If previous operator is \n            // else just add the operator to the arrayOfExpresion \n            //\n\n\n            // If countOperators >= 1 and pressed `-` at the end\n            // Then negativeOperand = true\n\n\n            if (this.state.countOperators !== 0){\n                if (tempOperator === \"-\") {\n                    this.setState( (state)=>{return {negativeOperand: true} }  );\n                } else {\n                    tempArray[ tempArray.length - 1 ] = tempOperator;\n                    this.setState( (state)=>{return {negativeOperand: false} }  );\n                }\n            } else {\n                // Only push an operator if the countMinus is less or equal 1 \n                // which means that the minus was pressed once before \n                tempArray.push(tempOperator);\n            }\n\n            // Only count operators if the operators is not \"-\" spceial character...\n            let tempCountOperators = this.state.countOperators ;\n            tempCountOperators ++;\n\n            console.log(\"tempArray=\", tempArray);\n            //tempArray.push(state.currentOperand);\n\n\n            this.setState ((state)=>{ \n\n                return { \n                    lowerScreenValue:  e.target.textContent,\n                    lastOperator: e.target.textContent,\n                    arrayOfExpresion: tempArray,\n                    countOperators: tempCountOperators\n                };\n\n            }  );\n\n        }\n\n\n\n\n\n\n\n        // console.log(\"state=\", state);\n    }\n\n\n\n\n    handleButtonPress(e){\n        this.handleUpperDisplay(e);\n        this.handleLowerDisplay(e);\n        if (e.target.textContent === \"=\"){\n            this.handleCalculateTotal();\n        }\n    }\n\n\n    calculateTotal (firstOperand, operator, secondOperand){\n        // TODO I need to check of the string has a `.` if so \n        // then I will parse it as a float not as an integer...\n        firstOperand = parseInt(firstOperand);\n        secondOperand = parseInt(secondOperand);\n        let total = 0;\n\n        // console.log(\"firstOperand=\", firstOperand);\n        //console.log(\"secondOperand=\", secondOperand);\n\n        switch (operator){\n            case \"+\":\n                total = firstOperand + secondOperand;\n                break;\n\n            case \"-\":\n                total = firstOperand - secondOperand;\n                break;   \n\n\n            case \"*\":\n                total = firstOperand * secondOperand;\n                break;\n\n            case \"/\":\n                total = firstOperand / secondOperand;\n                break;   \n        }\n\n        this.setState ((state)=>{\n            // console.log(\"total=\", total);\n            return {\n                firstOperand: total\n            }\n        }  );\n\n    }\n\n//This function will parse an array similar to [ \"10\", \"-\", \"-2.42\", \"=\" ]\n// And will output the calculation after looping through such an array...\n\n    handleCalculateTotal(){\n        let total = 0;\n        let operand = 0;\n        let operator = \"+\";\n\n        let tempArray = this.state.arrayOfExpresion;\n\n        for (let i=0; i<tempArray.length; i++){\n            // console.log (\"i=\", i);\n            // Test if the item is an operator\n            // Set the operator     \n            switch (tempArray[i] ){\n                case \"+\":\n                    operator = \"+\";\n                    break;\n\n                case \"-\":\n                    operator = \"-\";\n                    break;   \n\n\n                case \"*\":\n                    operator = \"*\";\n                    break;\n\n                case \"/\":\n                    operator = \"/\";\n                    break; \n                case \"=\":\n                    operator = \"=\";\n                    break;\n                default:\n\n                    // Test if the item is a number \n                    // Make sure to check for float or integer \n                    if (tempArray[i].indexOf(\".\") !== -1 ) {\n                        // Then this is a float \n                        operand = parseFloat(tempArray[i]);\n                    } else {\n                        // Else it is a integer \n                        operand = parseInt(tempArray[i]);\n                    }\n\n                    break;\n\n\n            }\n            \n\n            // Do the calculation\n            // Test if the i-th element is a number or not\n            if (Number.isNaN( Number( tempArray[i] )  ) ){\n                // It is not a number \n                // console.log(\"Not a number\")\n            } else {\n                // It is a number \n            switch ( operator ){\n                case \"+\":\n                    total = total + operand;\n                    break;\n\n                case \"-\":\n                    total = total - operand;\n                    break;   \n\n\n                case \"*\":\n                    total = total * operand;\n                    break;\n\n                case \"/\":\n                    total = total / operand;\n                    break; \n                case \"=\":\n                    total = total;\n                    break;\n                default:\n                    break;\n\n\n            }\n\n            }\n\n            // console.log(\"operand=\", operand);\n            // console.log(\"operator=\", operator);\n            // console.log(\"total=\", total);\n            // console.log(\" Number.isNaN( Number( tempArray[i] )  )  \", Number.isNaN( Number( tempArray[i] )  )    )\n        } \n\n        // Print the total\n        console.log(\"total=\", total);\n        this.setState ((state)=>{ \n            return {\n                upperScreenValue: state.upperScreenValue.concat(`${total}`),\n                lowerScreenValue: `${total}`\n            } \n        }  );\n\n\n    }\n\n\n\n    displayTotal(){\n        //console.log(\"displayTotal called\");\n        this.setState((state)=>{\n            return {\n                lowerScreenValue: this.state.firstOperand\n            }\n        });\n    }\n\n\n\n\n\n    render(){\n        return (\n            <div className=\"calculator\">\n            <div id=\"bothDisplays\">\n            <div id=\"upperDisplay\">{this.state.upperScreenValue}</div>\n            <div id=\"display\">{this.state.lowerScreenValue}</div>\n            </div>\n\n            <div id=\"clear\" onClick={this.handleClearPress} >AC</div>\n            <div id=\"divide\" onClick={this.handleButtonPress}>/</div>\n            <div id=\"multiply\" onClick={this.handleButtonPress}>*</div>\n            <div id=\"subtract\" onClick={this.handleButtonPress}>-</div>\n            <div id=\"add\" onClick={this.handleButtonPress}>+</div>\n            <div id=\"equals\" onClick={this.handleButtonPress }>=</div>\n            <div id=\"seven\" onClick={this.handleButtonPress}>7</div>\n            <div id=\"eight\" onClick={this.handleButtonPress}>8</div>\n            <div id=\"nine\" onClick={this.handleButtonPress}>9</div>\n            <div id=\"four\" onClick={this.handleButtonPress}>4</div>\n            <div id=\"five\" onClick={this.handleButtonPress}>5</div>\n            <div id=\"six\" onClick={this.handleButtonPress}>6</div>\n            <div id=\"one\" onClick={this.handleButtonPress}>1</div>\n            <div id=\"two\" onClick={this.handleButtonPress}>2</div>\n            <div id=\"three\" onClick={this.handleButtonPress}>3</div>\n            <div id=\"zero\" onClick={this.handleButtonPress}>0</div>\n            <div id=\"decimal\" onClick={this.handleButtonPress}>.</div>\n            </div>\n        );\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\nexport default Calculator;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}